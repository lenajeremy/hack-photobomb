generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model User {
    id            String    @id @default(cuid())
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    name          String    @default("User")
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    accounts      Account[]
    sessions      Session[]
    files         File[]
    events        Event[]   @relation(name: "events")
    uploads       Upload[]  @relation(name: "uploads")
    Event         Event[]

    @@map("users")
}

model Event {
    id          String   @id @default(cuid())
    name        String
    slug        String   @unique
    description String   @default("") @db.Text()
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    eventDate   DateTime
    isPrivate   Boolean  @default(false)

    ownerId String
    owner   User   @relation(name: "events", fields: [ownerId], references: [id], onDelete: Cascade)

    participants User[]
    files        File[]
    uploads      Upload[] @relation(name: "uploads")

    @@map("events")
}

model File {
    id        String @id @default(cuid())
    cid       String @unique
    publicURL String
    owner     User   @relation(fields: [ownerId], references: [id])
    ownerId   String
    event     Event  @relation(fields: [eventId], references: [id])
    eventId   String
    upload    Upload @relation(fields: [uploadId], references: [id])
    uploadId  String

    createdAt DateTime @default(now())

    @@map("files")
}

model Upload {
    id        String   @id @default(cuid())
    text      String?  @db.Text
    files     File[]
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    ownerId String
    owner   User   @relation(name: "uploads", fields: [ownerId], references: [id], onDelete: Cascade)

    eventId String
    event   Event  @relation(name: "uploads", fields: [eventId], references: [id], onDelete: Cascade)

    @@map("uploads")
}
